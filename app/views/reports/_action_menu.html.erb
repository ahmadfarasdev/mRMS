<div class="noprint row">
  <div class="col-md-12 ">
    <div class="pull-right" style="margin-bottom: 10px">

      <% if @report.channel.is_personal? and @report.channel.is_creator?  %>
          <span>
            <%= show_button(share_report_channel_report_path(@report.channel, @report), ' Share Report', 'plus', 'primary') %>
          </span>
      <% end %>

      <% if params[:new_query] &&  @report.document_url %>
          <% if @report.channel.is_public? or @report.channel.is_creator? or @report.channel.my_permission.can_add_report? %>
          <%= show_button('#', ' Save Report', 'arrow-down', 'info', {toggle:"modal", target:"#mySaveModal" }) if  @report.document_url %>
          <% end %>
          <%= cancel_button channel_report_path(@channel, @report) %>
      <% elsif params[:query_id] &&   @report.document_url %>
          <% if ((@report.channel.is_public? and @report.created_by_id == User.current.id) or (!@report.channel.is_public? and @report.channel.is_creator?) or @report.channel.my_permission.can_add_report?) %>
              <%= show_button('#', ' Update Report', 'arrow-down', 'info', {toggle:"modal", target:"#myRenameModal" }) if  @report.document_url %>
          <% end %>
          <input type="button" onclick="$('#output').find('.pvtRendererArea').attr('id', 'testTable'); tableToExcel('testTable', 'Pivot table export')" value="Export to Excel" class="btn btn-primary">
          <input type="button" onclick="$('#output').find('.pvtRendererArea').attr('id', 'testTable');  exportSVG(document.getElementById('testTable') )" value="Export to SVG" class="btn btn-default">

          <%#= link_to "<i class='fa fa-print' aria-hidden='true'> Print </i>".html_safe,  '#', class: "noprint btn btn-primary", onclick: 'window.print(); ' %>
          <%= cancel_button channel_report_path(@channel, @report) %>
      <% else %>
          <% if @report.channel.is_public? or @report.channel.is_creator? or @report.channel.my_permission.can_add_report? %>
              <%= show_button(channel_report_path(@channel, @report, new_query: true), 'New Report', 'arrow-down', 'info' ) if  @report.document_url %>
          <% end %>
          <% if ((@report.channel.is_public? and (@report.created_by_id == User.current.id or @report.channel.is_creator?)) or (!@report.channel.is_public? and @report.channel.is_creator?) or @report.channel.my_permission.can_add_report?) %>
              <span>
                <%= show_button('#', ' Upload Data', 'upload', 'info', {toggle:"modal", target:"#myModal" }) %>
              </span>
          <% end %>

          <% if ((@report.channel.is_public? and @report.created_by_id == User.current.id) or (!@report.channel.is_public? and @report.channel.is_creator?) or @report.channel.my_permission.can_add_report?) %>
                  <span>
                    <%= edit_button edit_channel_report_path(@report.channel, @report) %>
                  </span>
          <% end %>

          <% if ((@report.channel.is_public? and @report.created_by_id == User.current.id) or (!@report.channel.is_public? and @report.channel.is_creator?) or @report.channel.my_permission.can_delete_report?) %>
                  <span>
                    <%= delete_button channel_report_path(@report.channel, @report), 'Data set' %>
                  </span>
          <% end %>
          <%= cancel_button channel_path(@channel) %>
      <% end %>

      <%= render partial: 'uploader/report_upload' %>
    </div>
  </div>
</div>
<script>
    var exportSVG = function(svg) {
        // first create a clone of our svg node so we don't mess the original one
        var clone = svg.cloneNode(true);
        // parse the styles
        parseStyles(clone);

        // create a doctype
        var svgDocType = document.implementation.createDocumentType('svg', "-//W3C//DTD SVG 1.1//EN", "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd");
        // a fresh svg document
        var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);
        // replace the documentElement with our clone
        svgDoc.replaceChild(clone, svgDoc.documentElement);
        // get the data
        var svgData = (new XMLSerializer()).serializeToString(svgDoc);

        // now you've got your svg data, the following will depend on how you want to download it
        // e.g yo could make a Blob of it for FileSaver.js
        /*
        var blob = new Blob([svgData.replace(/></g, '>\n\r<')]);
        saveAs(blob, 'myAwesomeSVG.svg');
        */
        // here I'll just make a simple a with download attribute

        var a = document.createElement('a');
        a.href = 'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(svgData.replace(/></g, '>\n\r<'));
        a.download = 'myAwesomeSVG.svg';
        a.innerHTML = 'download the svg file';
        document.body.appendChild(a);
        a.click()

    };

    var parseStyles = function(svg) {
        var styleSheets = [];
        var i;
        // get the stylesheets of the document (ownerDocument in case svg is in <iframe> or <object>)
        var docStyles = svg.ownerDocument.styleSheets;

        // transform the live StyleSheetList to an array to avoid endless loop
        for (i = 0; i < docStyles.length; i++) {
            styleSheets.push(docStyles[i]);
        }

        if (!styleSheets.length) {
            return;
        }

        var defs = svg.querySelector('defs') || document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        if (!defs.parentNode) {
            svg.insertBefore(defs, svg.firstElementChild);
        }
        svg.matches = svg.matches || svg.webkitMatchesSelector || svg.mozMatchesSelector || svg.msMatchesSelector || svg.oMatchesSelector;


        // iterate through all document's stylesheets
        for (i = 0; i < styleSheets.length; i++) {
            var currentStyle = styleSheets[i]

            var rules;
            try {
                rules = currentStyle.cssRules;
            } catch (e) {
                continue;
            }
            // create a new style element
            var style = document.createElement('style');
            // some stylesheets can't be accessed and will throw a security error
            var l = rules && rules.length;
            // iterate through each cssRules of this stylesheet
            for (var j = 0; j < l; j++) {
                // get the selector of this cssRules
                var selector = rules[j].selectorText;
                // probably an external stylesheet we can't access
                if (!selector) {
                    continue;
                }

                // is it our svg node or one of its children ?
                if ((svg.matches && svg.matches(selector)) || svg.querySelector(selector)) {

                    var cssText = rules[j].cssText;
                    // append it to our <style> node
                    style.innerHTML += cssText + '\n';
                }
            }
            // if we got some rules
            if (style.innerHTML) {
                // append the style node to the clone's defs
                defs.appendChild(style);
            }
        }

    };
</script>
